extends ../layout.pug

block title
    title Book

block content
    +header('http://platform.rs/index.png', 'The Book', 'A Guide to The Kernel Structures')
    article.main
        .types
            h1#taxonomy API
            -
                var types = {
                        '': ['Pub','Sub','Cursor','Queue','Channel'],
                        '': ['Task','CPS','Timer','Core','Hub','Host','IO'],
                    }

            .type
                for v, k in types
                    ol.type__col
                        h3= k.toUpperCase()
                        for i in v
                            li: a(href='#'+i)= i.toUpperCase()


        .intro
            h2 The Book
            p.
                The Kernel is an Actor system with two main Actor types: Queues,
                represented as ring buffers of memory slices;
                and Tasks, cpu processing atomic ports. Queues could be two types: Publisher,
                who holds writer cursors; and Subscriber, who holds reader cursors.
                Tasks represented as Rust LLVM task and CPS interpreter tasks.
                There is two special tasks: InterCore task spawned at any enabled cores;
                and CPS interpreter task of The Kernel Maintanance Shell is spawned at junk core, which
                also runs Console and WebSocket system IO. During system lifetime
                different CPS and Rust tasks could be spawned.
            p.
                Besides Queues and Tasks there is also Timers and other
                system IO tasks such as Network or Files. There are other entities such as
                Cores which are binded to cpus and run the task scheduler loops.
            p.
                The entire Virtual Machine is a set of Cores.

            h2#Publisher Publisher
            code.
                pub struct Publisher&lt;T> {
                    ring: Arc&lt;RingBuffer&lt;T>>,
                    next_seq_cache: Cell&lt;Sequence>,
                    cursors: UncheckedUnsafeArc&lt;Vec&lt;Cursor>>,
                }

